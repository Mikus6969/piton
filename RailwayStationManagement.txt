import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

class Route {
    private String routeName;
    private int maxPassengers;
    private List<Passenger> passengers;

    public Route(String routeName, int maxPassengers) {
        this.routeName = routeName;
        this.maxPassengers = maxPassengers;
        this.passengers = new ArrayList<>();
    }

    public String getRouteName() {
        return routeName;
    }

    public int getMaxPassengers() {
        return maxPassengers;
    }

    public int getAvailableSeats() {
        return maxPassengers - passengers.size();
    }

    public List<Passenger> getPassengers() {
        return passengers;
    }

    public boolean addPassenger(Passenger passenger) {
        if (passengers.size() < maxPassengers) {
            passengers.add(passenger);
            return true;
        }
        return false;
    }
}

class Passenger {
    private String name;

    public Passenger(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

public class RailwayStationManagement {
    private HashMap<Integer, Route> routes;
    private int routeNumberCounter = 1;

    public RailwayStationManagement() {
        routes = new HashMap<>();
        
        routes.put(routeNumberCounter++, new Route("Riga - Liepaja", 10));
        routes.put(routeNumberCounter++, new Route("Cesis - Valmiera", 5));
        routes.put(routeNumberCounter++, new Route("Cesis - Riga", 9));
    }

    public void addNewRoute(String startCity, String destinationCity, int maxPassengers) {
        String routeName = startCity + " - " + destinationCity;
        routes.put(routeNumberCounter++, new Route(routeName, maxPassengers));
    }

    public boolean addPassengerToRoute(int routeNumber, Passenger passenger) {
        Route route = routes.get(routeNumber);
        if (route != null && route.addPassenger(passenger)) {
            return true;
        }
        return false; 
    }
    
    // Lambda Expression: Used in forEach loop
    public void printPassengersOnAllRoutes() {
        System.out.println("Passengers on all routes:");
        for (Route route : routes.values()) {
            System.out.println("Route: " + route.getRouteName());
            List<Passenger> passengers = route.getPassengers();
            if (!passengers.isEmpty()) {
                System.out.println("Passengers:");
                passengers.forEach(passenger -> System.out.println(passenger.getName())); 
            } else {
                System.out.println("No passengers");
            }
            System.out.println();
        }
    }
    
    // orEach method call
    public void printAvailableSeats() {
        System.out.println("Available seats on each route:");
        routes.forEach((key, value) -> System.out.println(key + ". " + value.getRouteName() + " (" + value.getAvailableSeats() + " seats left)")); 
    }

    public boolean removePassengerFromRoute(int routeNumber, String passengerName) {
        Route route = routes.get(routeNumber);
        if (route != null) {
            List<Passenger> passengers = route.getPassengers();
            passengers.removeIf(passenger -> passenger.getName().equals(passengerName));
            return true;
        }
        return false;
}
}
class mein {
    public static void main(String[] args) {
        RailwayStationManagement station = new RailwayStationManagement();
        Scanner scanner = new Scanner(System.in);

        int choice;
        do {
            System.out.println("__________________________________________");
            System.out.println();
            System.out.println("Railway Station Management System");
            System.out.println("1. Add New Route");
            System.out.println("2. Add Passenger to Route");
            System.out.println("3. Print Passengers on Route");
            System.out.println("4. Print Available Seats on Each Route");
            System.out.println("5. Remove Passenger from Route");
            System.out.println("6. Exit");
            System.out.println("__________________________________________");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            System.out.println();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter start city of the new route: ");
                    String startCity = scanner.nextLine();
                    System.out.print("Enter destination city of the new route: ");
                    String destinationCity = scanner.nextLine();
                    System.out.print("Enter maximum passengers allowed: ");
                    int maxPassengers = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    station.addNewRoute(startCity, destinationCity, maxPassengers);
                    System.out.println("Route added successfully.");
                    break;
                case 2:
                    station.printAvailableSeats();
                    System.out.print("Enter route number: ");
                    int routeNum = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter passenger name: ");
                    String passengerName = scanner.nextLine();
                    boolean passengerAdded = station.addPassengerToRoute(routeNum, new Passenger(passengerName));
                    if (passengerAdded) {
                        System.out.println("Passenger added successfully.");
                    } else {
                        System.out.println("0 seats left. Passenger not added.");
                    }
                    break;
                
                case 3:
                    station.printPassengersOnAllRoutes();
                    break;
                case 4:
                    station.printAvailableSeats();
                    break;
                case 5:
                    System.out.print("Enter route number: ");
                    int routeNumber = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter passenger name to remove: ");
                    String passengerToRemove = scanner.nextLine();
                    boolean passengerRemoved = station.removePassengerFromRoute(routeNumber, passengerToRemove);
                    if (passengerRemoved) {
                        System.out.println("Passenger removed successfully.");
                    } else {
                        System.out.println("Route not found or passenger not found on the route.");
                    }
                    break;
                case 6:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a number between 1 and 6.");
            }
        } while (choice != 6);
        
        scanner.close();
    }
}